(function(){"use strict";try{if(typeof window!=="undefined"&&window.parent){console.log=window.parent.console.log;console.error=window.parent.console.error;console.warn=window.parent.console.warn}}catch(e){console.error(e)}var plaindata={PlainStore:function(object){if(!object)object=new Object;this.uidGenerator=Math.round(Math.random()*1e6);this.accessors=new Object;this.originalById=new Object;this.actionsByOriginalId=new Object;this.actionProcessorActive=false;this.original=new Object;this.storedAccessorKey=null;this.prepareOriginal(this.original);this.compatibilityMode=false;this.setterFunctionCache={};this.getterFunctionCache={};this.shallowMode=false;if(typeof object!="undefined"){this.original.root=JSON.parse(JSON.stringify(object));this.prepareOriginal(this.original.root,"root",this.original)}if(typeof Object.seal!=="undefined"){Object.seal(this)}},debugMode:true,isAccessor:function(accessor){return accessor!=null&&typeof accessor!="undefined"&&plaindata.isObject(accessor)&&typeof accessor.$so!="undefined"&&typeof accessor.$so["accessorId"]!="undefined"},isOriginal:function(original){return original!=null&&typeof original!="undefined"&&plaindata.isObject(original)&&typeof original.$so!="undefined"&&typeof original.$so["originalId"]!="undefined"},onChange:function(accessor,fn){if(!this.isAccessor(accessor)){if(plaindata.debugMode)console.warn("onchange need to be called for accessor");return false}if(fn){accessor.$so["listeners"][0]=fn}else{accessor.$so["listeners"].length=0}return true},createAccessor:function(original,idEncodedOriginal){if(idEncodedOriginal){var store=new plaindata.PlainStore;store.original.root=store.idDecode(original);return store.addAccessor(store.original.root)}var store=new plaindata.PlainStore(original);return store.addAccessor(store.original.root)},idEncode:function(accessor){if(!this.isAccessor(accessor)){if(plaindata.debugMode)console.error("idEncode must be applied on existing accessor");return}var original=accessor.$so.original;var store=original.$so.plainStore;return store.idEncode(original)},addAccessor:function(accessor){if(!this.isAccessor(accessor)){if(plaindata.debugMode)console.error("addAccessor must be applied on existing accessor");return}var original=accessor.$so["original"];var plainstore=original.$so["plainStore"];return plainstore.addAccessor(accessor)},removeAccessor:function(accessor){if(!this.isAccessor(accessor))return false;var original=accessor.$so["original"];var plainstore=original.$so["plainStore"];return plainstore.removeAccessor(accessor)},load:function(accessor,name){var original=accessor.$so.original;var value=original[name];if(plaindata.isObject(value)){var accessorId=accessor.$so.accessorId;return value.$so.accessors[accessorId]}return value},remove:function(accessor,name){if(!this.isAccessor(accessor)){console.error("remove function can only be used with accessor");return}if(typeof name=="undefined"){console.error("remove function name parameter missing");return}var removed=new Array;var original=accessor.$so.original;var accessors=original.$so["accessors"];var plainstore=original.$so["plainStore"];if(plaindata.isArray(original)){if(isNaN(name)){if(plaindata.debugMode)console.warn("index must be integer");return}name=Number(name);if(name<0||name>=accessor.length){if(plaindata.debugMode)console.warn("index "+name+" out of bounds in array of length "+accessor.length);return}removed.push.apply(removed,original.splice(name,1));for(var i=name;i<original.length;i++){if(plaindata.isObject(original[i]))original[i].$so["name"]--}for(var accessorId in accessors){accessors[accessorId].length=accessors[accessorId].length-1}}else{if(typeof original[name]=="undefined"){if(plaindata.debugMode)console.warn("remove not applied on existing property "+name);return}for(var accessorId in accessors){delete accessors[accessorId][name]}removed.push(original[name]);delete original[name]}for(var i=0;i<removed.length;i++){plainstore.removeOriginal(removed[i]);plainstore.backlogAction(accessor,plaindata.REMOVE,name,removed[i])}return removed},sync:function(master,slave){console.log("sync");for(var key in slave){if(typeof master[key]==="undefined"){plaindata.remove(slave,key)}}for(var key in master){if(typeof slave[key]==="undefined"){if(plaindata.isObject(master[key])){var store=slave.$so.original.$so.plainStore;var original=store.idDecode(plaindata.idEncode(master[key]),key,slave);plaindata.insert(slave,key,original,true);original.$so.parent=slave.$so.original}else{plaindata.insert(slave,key,master[key])}}else if(plaindata.isObject(master[key])){if(plaindata.isObject(slave[key])){if(master[key].$so.original.$so.originalId===slave[key].$so.original.$so.originalId){plaindata.sync(master[key],slave[key])}else{plaindata.remove(slave,key);var store=slave.$so.original.$so.plainStore;var original=store.idDecode(plaindata.idEncode(master[key]),key,slave);plaindata.insert(slave,key,original,true);original.$so.parent=slave.$so.original}}}else{if(typeof slave[key]!=="undefined"){plaindata.store(slave,key,master[key])}}}},store:function(accessor,name,value){if(!plaindata.isAccessor(accessor)){console.error("store function can only be used with accessor");return}var original=accessor.$so.original;var plainstore=original.$so.plainStore;if(typeof value==="undefined"){var prev=original;value=name;var prevIsObject=plaindata.isObject(prev);var valueIsObject=plaindata.isObject(value);var parent=original.$so.parent;if(!parent||parent===plainstore.original||typeof parent.$so.accessors[accessor.$so.accessorId]==="undefined"){if(prevIsObject&&valueIsObject){var prevIsArray=plaindata.isArray(prev);var valueIsArray=plaindata.isArray(value);if(prevIsObject&&!valueIsObject||!prevIsObject&&valueIsObject||prevIsArray&&!valueIsArray||!prevIsArray&&valueIsArray){if(plaindata.debugMode)console.error("root type change not supported");return}if(valueIsArray){plainstore.storeArrayIntoArray(accessor,value,prev)}else{plainstore.storeObjectIntoObject(accessor,value,prev)}return value}else{if(plaindata.debugMode)console.error("root types can not be primitives");return}}name=original.$so.name;accessor=parent.$so.accessors[accessor.$so.accessorId];original=accessor.$so.original}if(typeof accessor[name]==="undefined"){return plaindata.insert(accessor,name,value)}var prev=original[name];if(plaindata.isObject(value)){value=JSON.parse(JSON.stringify(value))}var prevIsObject=plaindata.isObject(prev);var valueIsObject=plaindata.isObject(value);if(prevIsObject||valueIsObject){var prevIsArray=plaindata.isArray(prev);var valueIsArray=plaindata.isArray(value);if(prevIsObject&&!valueIsObject||!prevIsObject&&valueIsObject||prevIsArray&&!valueIsArray||!prevIsArray&&valueIsArray){plaindata.remove(accessor,name);plaindata.insert(accessor,name,value);return accessor[name]}if(valueIsArray){plainstore.storeArrayIntoArray(accessor[name],value,prev)}else{plainstore.storeObjectIntoObject(accessor[name],value,prev)}return accessor[name]}if(prev===value){return accessor[name]}original[name]=value;plainstore.backlogAction(accessor,plaindata.UPDATE,name,prev);return accessor[name]},insert:function(accessor,name,value,internal){if(!plaindata.isAccessor(accessor)){console.error("insert function can only be used with accessor");return}if(typeof name=="undefined"||typeof value=="undefined")return;if(plaindata.isObject(value)&&!internal)value=JSON.parse(JSON.stringify(value));var original=accessor.$so["original"];var accessors=original.$so["accessors"];var plainstore=original.$so["plainStore"];if(plaindata.isArray(accessor)){if(isNaN(name)){if(plaindata.debugMode)console.warn("index must be integer");return}name=Number(name);if(name<0||name>accessor.length){if(plaindata.debugMode)console.warn("index "+name+" out of bounds in array of length "+accessor.length);return}original.splice(name,0,value);if(!internal)plainstore.prepareOriginal(value,name,original);for(var accessorId in accessors){plainstore.addToAccessor(accessors[accessorId],accessorId,original,original.length-1);plainstore.addToAccessor(accessors[accessorId],accessorId,original,name)}for(var i=name+1;i<original.length;i++){if(plaindata.isObject(original[i]))original[i].$so["name"]++}}else{if(typeof accessor[name]!=="undefined"){if(plaindata.debugMode)console.error("insert applied on existing property "+name+" in "+original.$so.originalId+" - overwriting - internal: "+internal);return}original[name]=value;if(!internal)plainstore.prepareOriginal(value,name,original);for(var accessorId in accessors){plainstore.addToAccessor(accessors[accessorId],accessorId,original,name)}}plainstore.backlogAction(accessor,plaindata.INSERT,name);return accessor[name]},isArray:function(o){return Object.prototype.toString.call(o)==="[object Array]"},isObject:function(o){return o!==null&&typeof o==="object"},isNonEmptyString:function(o){return plaindata.isObject&&typeof o==="string"&&o.length>0},INSERT:"insert",UPDATE:"update",REMOVE:"remove"};plaindata.PlainStore.prototype.storeObjectIntoObject=function(accessor,value,prev){for(var prop in value){if(typeof prev[prop]=="undefined"){plaindata.insert(accessor,prop,value[prop])}else{plaindata.store(accessor,prop,value[prop])}}for(var prop in prev){if(typeof value[prop]=="undefined"){plaindata.remove(accessor,prop)}}};plaindata.PlainStore.prototype.storeArrayIntoArray=function(accessor,value,prev){var prevValues=new Array;for(var i=0;i<prev.length;i++){prevValues.push(prev[i])}for(var i=0;i<value.length;i++){var v=value[i];if(plaindata.isObject(v)){var found=false;if(plaindata.isArray(v)){for(var index=0;index<prevValues.length;index++){if(plaindata.isArray(prevValues[index])){plaindata.store(accessor,prev.indexOf(prevValues[index]),v);prevValues.splice(index,1);found=true;break}}}else{for(var index=0;index<prevValues.length;index++){if(plaindata.isObject(prevValues[index])){plaindata.store(accessor,prev.indexOf(prevValues[index]),v);prevValues.splice(index,1);found=true;break}}}if(!found){plaindata.insert(accessor,i,v)}continue}var index=prevValues.indexOf(v);if(index<0){plaindata.insert(accessor,i,v);continue}prevValues.splice(index,1);continue}for(var i=0;i<prevValues.length;i++){var index=prev.indexOf(prevValues[i]);plaindata.remove(accessor,index,v)}};plaindata.PlainStore.prototype.indexOfValue=function(array,valueOrOriginal){if(plaindata.isArray(valueOrOriginal)){for(var i=0;i<array.length;i++){if(plaindata.isArray(array[i])){return i}}return-1}if(plaindata.isObject(valueOrOriginal)){for(var i=0;i<array.length;i++){if(plaindata.isObject(array[i])){return i}}return-1}return array.indexOf(valueOrOriginal)};plaindata.PlainStore.prototype.addAccessor=function(accessor){var original;if(plaindata.isAccessor(accessor)){original=accessor.$so["original"]}else{original=this.original.root}var accessorId=this.uidGenerator++;var accessor=this.createAccessor(accessorId,original);this.accessors[accessorId]=accessor;original.$so["accessors"][accessorId]=accessor;return accessor};plaindata.PlainStore.prototype.removeAccessor=function(accessor){var id=this.accessorIdFor(accessor);if(id<0)return false;this.killAccessor(accessor);delete this.accessors[id];return true};plaindata.PlainStore.prototype.accessorIdFor=function(existingAccessor){for(var id in this.accessors){var accessor=this.accessors[id];if(existingAccessor==accessor)return id}return-1};plaindata.PlainStore.prototype.removeOriginal=function(original){if(!plaindata.isOriginal(original))return;if(plaindata.isArray(original)){for(var i=0;i<original.length;i++){this.removeOriginal(original[i])}}else{for(var prop in original){this.removeOriginal(original[prop])}}delete this.originalById[original.$so.originalId]};plaindata.PlainStore.prototype.prepareOriginal=function(original,name,parent){if(!plaindata.isObject(original))return;this.secretObject(original)["accessors"]=new Object;this.secretObject(original)["plainStore"]=this;var originalId=this.uidGenerator++;if(parent===this.original){originalId=1}this.secretObject(original)["originalId"]=originalId;this.originalById[originalId]=original;if(typeof name!="undefined")this.secretObject(original)["name"]=name;if(typeof parent!="undefined")this.secretObject(original)["parent"]=parent;for(var prop in original){this.prepareOriginal(original[prop],prop,original)}return original};plaindata.PlainStore.prototype.addToAccessor=function(accessor,accessorId,original,prop){var childAccessor;if(plaindata.isObject(original[prop])){if(typeof this.secretObject(original[prop])["accessors"][accessorId]=="undefined"){this.secretObject(original[prop])["accessors"][accessorId]=this.createAccessor(accessorId,original[prop])}}if(typeof accessor[prop]=="undefined"){this.proxyProperty(accessor,accessorId,original,prop)}};plaindata.PlainStore.prototype.proxyProperty=function(accessor,accessorId,original,prop){var getter=this.getterFunctionCache[prop];if(!getter){getter=function(){if(this.$so.original.$so.plainStore.shallowMode){console.log("load "+this.$so.original.$so.originalId)}return plaindata.load(this,prop)};this.getterFunctionCache[prop]=getter}var setter=this.setterFunctionCache[prop];if(!setter){setter=function(x){plaindata.store(this,prop,x)};this.setterFunctionCache[prop]=setter}Object.defineProperty(accessor,prop,{enumerable:true,configurable:true,get:getter,set:setter})};plaindata.PlainStore.prototype.recreateAccessor=function(accessor,accessorId,original){for(var prop in original){this.addToAccessor(accessor,accessorId,original,prop)}return accessor};plaindata.PlainStore.prototype.createAccessor=function(accessorId,original){var accessor;if(plaindata.isArray(original)){var a=new Array;Object.defineProperty(a,"0",{enumerable:true,configurable:true,get:Function("return 33;"),set:Function("")});if(a["0"]===33&&a.length===1){accessor=new Array}else{console.warn("compatibility mode for older browsers - using object as array accessor");this.compatibilityMode=true;accessor=new Object;Object.defineProperty(accessor,"length",{enumerable:false,configurable:true,get:Function("return Object.keys(this).length;"),set:Function("var n=this.length;for (var i=arguments[0];i<n;i++)delete this[i];")});Object.defineProperty(accessor,"indexOf",{enumerable:false,configurable:true,writeable:false,get:Function("return function(){var length=Object.keys(this).length;for (var i=0;i<length; i++)if (this[i]===arguments[0])return i;return -1;}")})}Object.defineProperty(accessor,"sort",{enumerable:false,configurable:true,writeable:false,get:Function("return function(){var original=this.$so.original;original.sort.apply(original, arguments);for (var i=0; i<original.length; i++) if (plaindata.isObject(original[i])) original[i].$so['name']=i;}")});Object.defineProperty(accessor,"reverse",{enumerable:false,configurable:true,writeable:false,get:Function("return function(){var original=this.$so.original;original.reverse.apply(original, arguments);for (var i=0; i<original.length; i++) if (plaindata.isObject(original[i])) original[i].$so['name']=i;}")})}else{accessor=new Object}this.secretObject(accessor)["listeners"]=[];this.secretObject(accessor)["original"]=original;this.secretObject(accessor)["accessorId"]=accessorId;return this.recreateAccessor(accessor,accessorId,original)};plaindata.PlainStore.prototype.killAccessor=function(accessor){var id=accessor.$so["accessorId"];var original=accessor.$so["original"];delete original.$so["accessors"][id];for(var prop in accessor){if(plaindata.isObject(accessor[prop])){this.killAccessor(accessor[prop])}}if(plaindata.isArray(accessor)){accessor.splice(0,accessor.length)}else{for(var prop in accessor){delete accessor[prop]}}delete accessor.$so};plaindata.PlainStore.prototype.proxyContainer=function(original,prop,accessor){this.secretObject(accessor)["_"+prop]=original};plaindata.PlainStore.prototype.idDecode=function(encoded,name,parent){if(plaindata.isObject(encoded)){for(var originalId in encoded){var value=encoded[originalId];var original;if(plaindata.isArray(value)){original=[];for(var i=0;i<value.length;i++){original.push(this.idDecode(value[i],i,original))}}else if(plaindata.isObject(value)){original={};for(var prop in value){original[prop]=this.idDecode(value[prop],prop,original)}}else{return value}this.secretObject(original)["accessors"]=new Object;this.secretObject(original)["plainStore"]=this;this.secretObject(original)["originalId"]=originalId;this.originalById[originalId]=original;if(typeof name!=="undefined")this.secretObject(original)["name"]=name;if(typeof parent!=="undefined")this.secretObject(original)["parent"]=parent;return original}}else{return encoded}};plaindata.PlainStore.prototype.idEncode=function(original,resultNodeByOriginalId){if(typeof original=="undefined"){original=this.original.root}if(typeof resultNodeByOriginalId=="undefined"){resultNodeByOriginalId=new Object}var result;if(plaindata.isArray(original)){result=new Array;for(var i=0;i<original.length;i++){result.push(this.idEncode(original[i],resultNodeByOriginalId))}}else if(plaindata.isObject(original)){result=new Object;for(var prop in original){result[prop]=this.idEncode(original[prop],resultNodeByOriginalId)}}else{return original}var originalId=original.$so.originalId;var o=new Object;o[originalId]=result;resultNodeByOriginalId[originalId]=result;return o};plaindata.PlainStore.prototype.processActions=function(){this.actionProcessorActive=false;{for(var originalId in this.actionsByOriginalId){var actions=this.actionsByOriginalId[originalId];delete this.actionsByOriginalId[originalId];var original=actions.$so.original;var accessors=original.$so["accessors"];for(var id in accessors){var branchesByMethod=new Object;var removed=new Array;for(var i=0;i<actions.length;i++){var action=actions[i];if(action.accessorId==id){continue}var branches=branchesByMethod[action.method];if(typeof branches==="undefined"){branches=new Array;branchesByMethod[action.method]=branches}if(action.method==="remove")removed.push(action.removed);branches.push(action.prop)}var THIS=this;[plaindata.REMOVE,plaindata.INSERT,plaindata.UPDATE].forEach(function(method){if(typeof branchesByMethod[method]==="undefined")return;var branches=branchesByMethod[method];if(plaindata.isArray(original))branches=branches.sort(function(a,b){return a-b});var accessor=accessors[id];var listeners=accessor.$so["listeners"];for(var i=0;i<listeners.length;i++){var listener=listeners[i];if(THIS.actionsByOriginalId[originalId]!=undefined){if(THIS.debugMode)console.warn("modification on same node "+originalId+" while calling listeners on accessor "+id+" not yet handled correctly")}listener.call(accessor,method,branches,removed)}})}}}if(this.storedAccessorKey!==null){console.log("updating persistent representation");localStorage.setItem(this.storedAccessorKey,JSON.stringify(this.idEncode()))}};plaindata.PlainStore.prototype.processAction=function(action,original,prop){var originalId=original.$so["originalId"];{var actionsOnOriginal=this.actionsByOriginalId[originalId];if(typeof actionsOnOriginal=="undefined"){actionsOnOriginal=new Array;this.secretObject(actionsOnOriginal)["original"]=original;this.actionsByOriginalId[originalId]=actionsOnOriginal}if(plaindata.isArray(original))prop=Number(prop);var action={accessorId:action.accessorId,method:plaindata.UPDATE,prop:prop};var actionOnOriginalProp;for(var i=0;i<actionsOnOriginal.length;i++){if(actionsOnOriginal[i].method==plaindata.UPDATE&&actionsOnOriginal[i].prop==prop){actionOnOriginalProp=actionsOnOriginal[i];actionsOnOriginal.splice(i,1);break}}if(typeof actionOnOriginalProp!="undefined"){if(action.prop!=actionOnOriginalProp.prop){if(plaindata.debugMode)console.warn("internal error")}if(action.original!=actionOnOriginalProp.original){if(plaindata.debugMode)console.warn("internal error")}if(action.method!=actionOnOriginalProp.method){if(plaindata.debugMode)console.warn("not implemented")}if(action.accessorId!=""&&action.accessorId!=actionOnOriginalProp.accessorId){action.accessorId=""}}actionsOnOriginal.push(action)}prop=original.$so["name"];original=original.$so["parent"];if(typeof original=="undefined"){return}this.processAction(action,original,prop)};plaindata.PlainStore.prototype.backlogAction=function(accessor,method,prop,updatedOrRemoved){var accessorId=accessor.$so["accessorId"];if(typeof this.backlogActionToChangelog!="undefined"){{for(var id in this.accessors){var acc=this.accessors[id];if(plaindata.isChangelogAccessor(acc)&&accessorId!=id){this.backlogActionToChangelog(acc.$so.changelog,accessor,method,prop,updatedOrRemoved)}}}}var original=accessor.$so["original"];var originalId=original.$so["originalId"];var actionsOnOriginal=this.actionsByOriginalId[originalId];if(typeof actionsOnOriginal=="undefined"){actionsOnOriginal=new Array;this.secretObject(actionsOnOriginal)["original"]=original;this.actionsByOriginalId[originalId]=actionsOnOriginal}if(plaindata.isArray(original))prop=Number(prop);var action={original:original,accessorId:accessorId,method:method,prop:prop};if(method==="remove"){action.removed=updatedOrRemoved}var doPush=true;var doPropagate=true;if(method==plaindata.REMOVE){for(var i=0;i<actionsOnOriginal.length;i++){if(actionsOnOriginal[i].prop==prop){if(actionsOnOriginal[i].method==plaindata.UPDATE){actionsOnOriginal.splice(i,1);doPropagate=false}else if(actionsOnOriginal[i].method==plaindata.INSERT){actionsOnOriginal.splice(i,1);doPush=false;doPropagate=false}}}}else if(method==plaindata.UPDATE){for(var i=0;i<actionsOnOriginal.length;i++){if(actionsOnOriginal[i].prop==prop){if(actionsOnOriginal[i].method==plaindata.UPDATE){actionsOnOriginal.splice(i,1);break}else if(actionsOnOriginal[i].method==plaindata.INSERT){}}}}if(plaindata.isArray(original)){if(method==plaindata.INSERT){for(var i=0;i<actionsOnOriginal.length;i++){if(actionsOnOriginal[i].prop>=prop)actionsOnOriginal[i].prop++}}else if(method==plaindata.REMOVE){for(var i=0;i<actionsOnOriginal.length;i++){if(actionsOnOriginal[i].prop>prop)actionsOnOriginal[i].prop--}}}if(doPropagate){var parent=original.$so["parent"];if(typeof parent!=="undefined"){this.processAction(action,parent,original.$so["name"])}}if(doPush){actionsOnOriginal.push(action)}if(!this.actionProcessorActive){this.actionProcessorActive=true;var THIS=this;if(typeof window!=="undefined"){var topWindow=window;try{while(topWindow.parent&&topWindow.parent!==topWindow){topWindow=topWindow.parent}topWindow.setTimeout(function(){THIS.processActions()},0)}catch(e){console.error(e);window.setTimeout(function(){THIS.processActions()},0)}}else{setTimeout(function(){THIS.processActions()},0)}}};plaindata.PlainStore.prototype.secretObject=function(object){if(!object.$so){Object.defineProperty(object,"$so",{value:{},writable:true,enumerable:false,configurable:true})}return object.$so};plaindata.uuid=function(template){var d=(new Date).getTime();return template.replace(/[xy]/g,function(c){var r=d&15^Math.random()*16|0,v=c=="x"?r:r&3|8;d=d>>4;return v.toString(16)})};plaindata.removeStorage=function(key){localStorage.removeItem(key)};plaindata.storeAccessor=function(accessor,key){localStorage.setItem(key,JSON.stringify(plaindata.idEncode(accessor)))};plaindata.createStoredAccessor=function(key){var data=localStorage.getItem(key);if(!data){var accessor=plaindata.createAccessor({});localStorage.setItem(key,JSON.stringify(plaindata.idEncode(accessor)));data=localStorage.getItem(key);if(typeof data==="undefined"){console.error("local storage seems not available");return undefined}}var accessor=plaindata.createAccessor(JSON.parse(data),true);accessor.$so.original.$so.plainStore.storedAccessorKey=key;return accessor};plaindata.isChangelogAccessor=function(accessor){return this.isAccessor(accessor)&&typeof accessor.$so.changelog!="undefined"};plaindata.addChangelogAccessor=function(accessor){console.log("add changelog accessor is deprecated - use addAccessor and startChangeLog");if(!this.isAccessor(accessor)){if(this.debugMode)console.error("addChangelogAccessor must be called on accessor");return}var changelogAccessor=this.addAccessor(accessor);changelogAccessor.$so.changelog=new Object;plaindata.pullChangelog(changelogAccessor);return changelogAccessor};plaindata.startChangelog=function(accessor){accessor.$so.changelog=new Object;plaindata.pullChangelog(accessor);return plaindata.idEncode(accessor)};plaindata.stopChangelog=function(accessor){accessor.$so.changelog=undefined};plaindata.pushChangelog=function(accessor,changelog){if(!this.isChangelogAccessor(accessor)){if(this.debugMode)console.error("pushChangelog must be called on changelog accessor");return}changelog=JSON.parse(changelog);if(!changelog)return;var original=accessor.$so["original"];var plainstore=original.$so["plainStore"];{var removeLog=changelog[plaindata.REMOVE];if(removeLog){plainstore.executeRemoveChangelog(accessor.$so.accessorId,removeLog)}}{var insertLog=changelog[plaindata.INSERT];if(insertLog){plainstore.executeInsertChangelog(accessor.$so.accessorId,insertLog,accessor.$so.changelog[plaindata.INSERT])}}{var updateLog=changelog[plaindata.UPDATE];if(updateLog){plainstore.executeUpdateChangelog(accessor.$so.accessorId,updateLog,accessor.$so.changelog[plaindata.UPDATE])}}};plaindata.pullChangelog=function(accessor){if(!this.isChangelogAccessor(accessor)){if(this.debugMode)console.error("pushChangelog must be called on changelog accessor");return}var changelog=accessor.$so.changelog;var result=JSON.stringify(changelog);changelog[plaindata.REMOVE]=new Array;var original=accessor.$so.original;var plainstore=original.$so.plainStore;changelog[plaindata.INSERT]=new Object;plainstore.secretObject(changelog[plaindata.INSERT])["nodeByOriginalId"]=new Object;changelog[plaindata.UPDATE]=new Object;return result};plaindata.PlainStore.prototype.executeRemoveChangelog=function(accessorId,removeLog){if(removeLog.length==0)return;var start=0;if(plaindata.isObject(removeLog[0])){start=1;for(var originalId in removeLog[0]){var original=this.originalById[originalId];if(!original){if(this.debugMode)console.log("resolved not in store already when removing "+originalId);continue}var accessor=original.$so.accessors[accessorId];if(typeof accessor=="undefined"){if(this.debugMode)console.error("remove parent node "+parentId+" is not part of accessor with id "+accessorId);continue}var props=removeLog[0][originalId];if(plaindata.isArray(original)){for(var i=0;i<props.length;i++){var index=original.indexOf(props[i]);if(index>=0){plaindata.remove(accessor,index)}}}else{for(var i=0;i<props.length;i++){var prop=props[i];if(typeof accessor[prop]=="undefined"){if(this.debugMode)console.log("resolved not in store already when removing "+prop+" in "+originalId);continue}plaindata.remove(accessor,prop)}}}}for(var i=start;i<removeLog.length;i++){var originalId=removeLog[i];var original=this.originalById[originalId];if(!original){if(this.debugMode)console.log("resolved not in store already when removing "+originalId);continue}var parent=original.$so.parent;var prop=original.$so.name;var accessor=parent.$so.accessors[accessorId];if(typeof accessor=="undefined"){if(this.debugMode)console.error("remove parent node "+parentId+" is not part of accessor with id "+accessorId);continue}plaindata.remove(accessor,prop)}};plaindata.PlainStore.prototype.executeInsertChangelog=function(accessorId,insertLog,accessorInsertLog){for(var parentId in insertLog){var original=this.originalById[parentId];if(typeof original=="undefined"){if(this.debugMode)console.warn("insert on non existing parent node "+parentId);continue}var accessor=original.$so.accessors[accessorId];if(typeof accessor=="undefined"){if(this.debugMode)console.warn("insert parent node "+parentId+" is not part of accessor with id "+accessorId);continue}var insert=insertLog[parentId];if(plaindata.isArray(insert)){if(!plaindata.isArray(accessor)){if(this.debugMode)console.warn("insert of array to an object makes no sense");return}var start=0;if(plaindata.isObject(insert[0])){start=1;for(var k in insert[0]){var o=new Object;o[k]=insert[0][k];plaindata.insert(accessor,accessor.length,this.idDecode(o,accessor.length,accessor.$so.original),true)}}for(var i=start;i<insert.length;i++){plaindata.insert(accessor,accessor.length,insert[i],true)}}else{if(plaindata.isArray(accessor)){if(this.debugMode)console.warn("insert of object to an array makes no sense");return}for(var prop in insert){if(typeof accessor[prop]!="undefined"){plaindata.remove(accessor,prop);if(!delete accessorInsertLog[parentId][prop]){console.error("expected inserted element "+original.$so.originalId+" when having conflicting inserts in two connected stores - TODO: mark stores out of sync");return}if(this.debugMode)console.log("resolved conflicting inserts from "+prop+" in "+parentId)}plaindata.insert(accessor,prop,this.idDecode(insert[prop],prop,accessor.$so.original),true)}}}};plaindata.PlainStore.prototype.executeUpdateChangelog=function(accessorId,updateLog,accessorUpdateLog){for(var originalId in updateLog){var original=this.originalById[originalId];if(!original){if(plaindata.debugMode)console.log("resolved not in store already when updating "+originalId);delete accessorUpdateLog[originalId];continue}var accessor=original.$so.accessors[accessorId];if(typeof accessor=="undefined"){if(this.debugMode)console.error("update node "+originalId+" is not part of accessor with id "+accessorId);continue}var updates=updateLog[originalId];for(var prop in updates){accessor[prop]=updates[prop]}var accessorUpdate=accessorUpdateLog[originalId];if(accessorUpdate){for(var prop in updates){if(delete accessorUpdate[prop]){if(plaindata.debugMode)console.log("resolved conflicting updates on "+prop+" in "+originalId)}}}}};plaindata.PlainStore.prototype.backlogActionToChangelog=function(changeNode,accessor,method,prop,updatedOrRemoved){var accessorId=accessor.$so["accessorId"];var original=accessor.$so["original"];var originalId=original.$so["originalId"];var plainstore=original.$so.plainStore;if(method==plaindata.UPDATE){{if(plaindata.isArray(original)){this.backlogActionToChangelog(changeNode,accessor,plaindata.REMOVE,prop,updatedOrRemoved);this.backlogActionToChangelog(changeNode,accessor,plaindata.INSERT,prop,updatedOrRemoved);return}var updatedNode=changeNode[plaindata.UPDATE][originalId];if(!updatedNode){updatedNode=new Object;changeNode[plaindata.UPDATE][originalId]=updatedNode}updatedNode[prop]=original[prop];return}}if(method==plaindata.INSERT){if(plaindata.debugMode){var updatedNode=changeNode[plaindata.UPDATE][originalId];if(updatedNode&&typeof updatedNode.prop!="undefined"){console.error("shouldn't happen!");return}}{var insertedNode=changeNode[plaindata.INSERT].$so.nodeByOriginalId[originalId];if(!insertedNode){if(plaindata.isArray(original)){insertedNode=new Array}else{insertedNode=new Object}changeNode[plaindata.INSERT].$so.nodeByOriginalId[originalId]=insertedNode;changeNode[plaindata.INSERT][originalId]=insertedNode}var value=plainstore.idEncode(original[prop],changeNode[plaindata.INSERT].$so.nodeByOriginalId);if(plaindata.isArray(original)){if(plaindata.isObject(value)){if(insertedNode.length==0||!plaindata.isObject(insertedNode[0])){insertedNode.splice(0,0,new Object)}for(var k in value){insertedNode[0][k]=value[k]}}else{insertedNode.push(value)}}else{insertedNode[prop]=value}return}}if(method==plaindata.REMOVE){if(!plaindata.isOriginal(updatedOrRemoved)){var insertedNode=changeNode[plaindata.INSERT].$so.nodeByOriginalId[originalId];if(insertedNode){if(plaindata.isArray(original)){var index=insertedNode.indexOf(updatedOrRemoved);if(index>=0){if(plaindata.debugMode)console.log("crucial optimized remove insert of same primitive "+updatedOrRemoved+" in "+originalId);insertedNode.splice(index,1);return}}else{if(typeof insertedNode[prop]!="undefined"){delete insertedNode[prop];if(plaindata.debugMode)console.log("crucial optimized remove insert of same primitive "+prop+" in "+originalId);return}}}{var removePropNodes=changeNode[plaindata.REMOVE][0];if(typeof removePropNodes=="undefined"||!plaindata.isObject(removePropNodes)){removePropNodes=new Object;changeNode[plaindata.REMOVE].splice(0,0,removePropNodes)}var removePropNode=removePropNodes[originalId];
if(typeof removePropNode=="undefined"){removePropNode=new Array;removePropNodes[originalId]=removePropNode}if(plaindata.isArray(original)){removePropNode.push(updatedOrRemoved)}else{removePropNode.push(prop)}}}else{var updatedOrRemovedId=updatedOrRemoved.$so["originalId"];if(typeof changeNode[plaindata.INSERT].$so.nodeByOriginalId[updatedOrRemovedId]!="undefined"){var insertedNode=changeNode[plaindata.INSERT].$so.nodeByOriginalId[originalId];if(insertedNode){if(plaindata.isArray(original)){if(plaindata.debugMode&&typeof insertedNode[0][updatedOrRemovedId]==="undefined"){console.error("shouldn't happen!")}delete insertedNode[0][updatedOrRemovedId];if(plaindata.debugMode)console.log("crucial optimized remove insert of same original "+updatedOrRemovedId+" in "+originalId)}else{if(plaindata.debugMode&&typeof insertedNode[prop]=="undefined"){console.error("shouldn't happen!")}delete insertedNode[prop];if(plaindata.debugMode)console.log("crucial optimized remove insert of same original "+prop+" in "+originalId)}return}else{console.error("shouldn't happen!")}}var removePropNodes=changeNode[plaindata.REMOVE][0];if(typeof removePropNodes!="undefined"&&typeof removePropNodes[updatedOrRemovedId]!=="undefined"){if(plaindata.debugMode)console.log("optimized remove of properties of object "+updatedOrRemovedId+" that is now removed itself");delete removePropNodes[updatedOrRemovedId]}changeNode[plaindata.REMOVE].push(updatedOrRemovedId)}}};if(typeof window!="undefined")window.plaindata=plaindata;if(typeof module!=="undefined"&&module.exports){module.exports=plaindata}if(typeof define==="function"){define("plaindata",[],function(){return plaindata})}if(typeof exports!=="undefined"){exports.plaindata=plaindata}})();